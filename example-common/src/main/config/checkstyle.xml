<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- 参考 https://checkstyle.org/ -->
<module name="Checker">

    <property name="charset" value="UTF-8"/>
    <property name="fileExtensions" value="java, properties, yml, xml"/>
    <!-- 根据注释跳过检查 -->
    <module name="SuppressWithPlainTextCommentFilter">
        <property name="offCommentFormat" value="SKIP CHECKSTYLE:START"/>
        <property name="onCommentFormat" value="SKIP CHECKSTYLE:END"/>
    </module>

    <!-- 文件长度不超过 1000行 -->
    <module name="FileLength">
        <property name="max" value="1000"/>
    </module>
    <!-- 每行不超过120个字符 -->
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!--禁止打印 e.printStackTrace 错误信息-->
    <module name="RegexpSingleline">
        <property name="format" value="printStackTrace"/>
        <property name="message" value="Prohibit invoking printStackTrace in source code !"/>
    </module>

    <!-- 每个 java 文件一个语法树 -->
    <module name="TreeWalker">

        <!-- import检查 -->
        <!-- 避免使用* -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.net,java.lang.Math"/>
            <!-- 实例；import java.util.*;.-->
            <property name="allowClassImports" value="false"/>
            <!-- 实例 ；import static org.junit.Assert.*;-->
            <property name="allowStaticMemberImports" value="true"/>
        </module>
        <!-- 检查是否导入了多余的包 -->
        <module name="RedundantImport"/>
        <!-- 没用的 import 检查，比如：1.没有被用到；2.重复的；3.import java.lang 的；4.import 与该类在同一个 package 的 -->
        <module name="UnusedImports"/>

        <!-- 命名检查 -->
        <!-- 局部的 final 变量，包括 catch 中的参数的检查 -->
        <module name="LocalFinalVariableName"/>
        <!-- 局部的非 final 型的变量，包括 catch 中的参数的检查 -->
        <module name="LocalVariableName"/>
        <!-- 包名的检查（只允许小写字母），默认^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9_]*)*$ -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="包名 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 仅仅是 static 型的变量（不包括static final型）的检查 -->
        <module name="StaticVariableName"/>
        <!-- Class 或 Interface 名检查，默认^[A-Z][a-zA-Z0-9]*$-->
        <module name="TypeName">
            <property name="severity" value="warning"/>
            <message key="name.invalidPattern" value="名称 ''{0}'' 要符合 ''{1}''格式."/>
        </module>
        <!-- 非 static 型变量的检查 -->
        <module name="MemberName"/>
        <!-- 方法名的检查 -->
        <module name="MethodName"/>
        <!-- 方法的参数名 -->
        <module name="ParameterName "/>
        <!-- 常量名的检查（只允许大写），默认^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ -->
        <module name="ConstantName"/>
        <!--检查连续大写字母的长度-->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false" />
            <property name="allowedAbbreviationLength" value="3" />
        </module>
        <!--检查以验证 lambda 参数名称-->
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- 定义检查 -->
        <!-- 检查数组类型定义的样式 -->
        <module name="ArrayTypeStyle"/>
        <!-- 检查 long 型定义是否有大写的"L" -->
        <module name="UpperEll"/>

        <!-- 方法不超过 100 行 -->
        <module name="MethodLength">
            <property name="tokens" value="METHOD_DEF"/>
            <property name="max" value="100"/>
        </module>
        <!-- 方法的参数个数不超过5个。 并且不对构造方法进行检查-->
        <module name="ParameterNumber">
            <property name="max" value="5"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <!-- 空格检查-->
        <!-- 方法名后跟左圆括号"(" -->
        <module name="MethodParamPad"/>
        <!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 -->
        <module name="TypecastParenPad"/>
        <!-- 检查在某个特定关键字之后应保留空格 -->
        <module name="NoWhitespaceAfter"/>
        <!-- 检查在某个特定关键字之前应保留空格 -->
        <module name="NoWhitespaceBefore"/>
        <!-- 操作符换行策略检查 -->
        <module name="OperatorWrap"/>
        <!-- 圆括号空白 -->
        <module name="ParenPad"/>
        <!-- 检查分隔符是否在空白之后 -->
        <module name="WhitespaceAfter"/>
        <!-- 检查分隔符周围是否有空白 -->
        <module name="WhitespaceAround"/>

        <!-- 修饰符检查 -->
        <!-- 检查修饰符的顺序是否遵照 java 语言规范，默认 public、protected、private、abstract、static、final、transient、volatile、synchronized、native、strictfp -->
        <module name="ModifierOrder"/>
        <!-- 检查接口和 annotation 中是否有多余修饰符，如接口方法不必使用 public -->
        <module name="RedundantModifier"/>

        <!-- 注释检查 -->
        <!-- 检查@子句后面的描述是否为空 -->
        <module name="NonEmptyAtclauseDescription" />
        <!-- 检查@子句的缩进 -->
        <module name="JavadocTagContinuationIndentation" />
        <!-- 检查 Javadoc 摘要语句是否包含不建议使用的短语 -->
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
            <!--指定第一个 javadoc 句末尾的结束符 -->
            <property name="period" value="" />
        </module>
        <!--检查@子句的顺序-->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
            <property name="target"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>

        <!-- 代码块检查 -->
        <!-- 检查是否有嵌套代码块 -->
        <module name="AvoidNestedBlocks"/>
        <!-- 检查是否有空代码块 -->
        <module name="EmptyBlock"/>
        <!-- 检查左大括号位置 -->
        <module name="LeftCurly"/>
        <!-- 检查代码块是否缺失 -->
        <module name="NeedBraces"/>
        <!-- 检查右大括号位置 -->
        <module name="RightCurly"/>

        <!-- 代码检查 -->
        <!-- 检查空的代码段 -->
        <module name="EmptyStatement"/>
        <!-- 检查在重写了 equals 方法后是否重写了 hashCode 方法 -->
        <module name="EqualsHashCode"/>
        <!-- 检查子表达式中是否有赋值操作 -->
        <module name="InnerAssignment"/>
        <!-- 检查是否有过度复杂的布尔表达式 -->
        <module name="SimplifyBooleanExpression"/>
        <!-- 检查是否有过于复杂的布尔返回代码段 -->
        <module name="SimplifyBooleanReturn"/>
        <!-- 检查 Java 代码的正确缩进 -->
        <module name="Indentation">
            <!-- 换行默认缩进字符数 -->
            <property name="basicOffset" value="4" />
            <!-- 在下一行时，大括号应缩进多远 -->
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
            <property name="throwsIndent" value="4" />
            <property name="lineWrappingIndentation" value="8" />
            <property name="arrayInitIndent" value="4" />
        </module>
        <!--检查使用分隔符的换行-->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot" />
            <property name="tokens" value="DOT" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma" />
            <property name="tokens" value="COMMA" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEllipsis" />
            <property name="tokens" value="ELLIPSIS" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapArrayDeclarator" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>

        <!-- 类设计检查 -->
        <!-- 检查只有 private 构造函数的类是否声明为 final -->
        <module name="FinalClass"/>

        <!-- 语法 -->
        <!-- String 的比较不能用 != 和 == -->
        <module name="StringLiteralEquality"/>
        <!-- 限制 for 循环最多嵌套 3 层 -->
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <!-- if 最多嵌套 3 层 -->
        <module name="NestedIfDepth">
            <property name="max" value="4"/>
        </module>
        <!-- 检查未被注释的 main 方法，排除以 Application 结尾命名的类 -->
        <module name="UncommentedMain">
            <property name="excludedClasses" value=".*[Application,Test]$"/>
        </module>
        <!-- 控制注释和周围代码之间的缩进 -->
        <module name="CommentsIndentation" />
        <!-- 禁止使用 System.out.println -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println"/>
            <property name="illegalPattern" value="true"/>
        </module>
        <!-- 空的 cache 块 -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <!--验证类中没有定义finalize()方法-->
        <module name="NoFinalizer" />

    </module>

</module>
